{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido","text":"<p>MkDocs es un generador de sitios web est\u00e1ticos que nos permite crear de forma sencilla un sitio web para documentar un proyecto. El contenido del sitio web est\u00e1 escrito en texto plano en formato Markdown y se configura con un \u00fanico archivo de configuraci\u00f3n en formato YAML.</p>"},{"location":"practicas13/practica13_1/","title":"IAW - Pr\u00e1ctica 13.1 AWS CLI (Command Line Interface)","text":"<p> AWS CLI (Command Line Interface) es una herramienta de l\u00ednea de comandos que permite a los usuarios interactuar con los servicios de AWS desde la terminal de su ordenador. Con AWS CLI, los usuarios pueden acceder y administrar una amplia variedad de recursos de AWS, incluidos los servicios de c\u00f3mputo, almacenamiento, bases de datos, redes, seguridad y mucho m\u00e1s. La AWS CLI es compatible con Windows, Linux y macOS, y se puede instalar f\u00e1cilmente a trav\u00e9s de un gestor de paquetes como pip. Adem\u00e1s, se puede utilizar en scripts para automatizar tareas en AWS y en aplicaciones que se ejecutan en AWS.</p>"},{"location":"practicas13/practica13_1/#12-instalacion-de-aws-cli","title":"1.2 Instalaci\u00f3n de AWS CLI","text":"<ul> <li>Linux</li> <li>macOS</li> <li>Windows</li> <li>Docker</li> </ul> <p>Se recomienda consultar la documentaci\u00f3n oficial para obtener los detalles de la instalaci\u00f3n para cada una de las opciones disponibles.</p>"},{"location":"practicas13/practica13_1/#121-instalacion-en-linux","title":"1.2.1 Instalaci\u00f3n en Linux","text":"<p>Para realizar la instalaci\u00f3n de AWS CLI en un sistema operativo Linux sobre una arquitectura x86 de 64 bits, tenemos que ejcutar los siguientes comandos.</p> <p>Paso 1. Descargamos un archivo .zip con la aplicaci\u00f3n AWS CLI.</p> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n</code></pre> <p>Paso 2. Descomprimimos el archivo que acabamos de descargar.</p> <pre><code>unzip awscliv2.zip\n</code></pre> <p>Paso 3. Ejectuamos el script de instalaci\u00f3n.</p> <pre><code>sudo ./aws/install\n</code></pre> <p>Paso 4. Comprobamos que la instalaci\u00f3n se ha realizado de forma correcta.</p> <pre><code>aws --version\n</code></pre>"},{"location":"practicas13/practica13_1/#122-instalacion-en-macos","title":"1.2.2 Instalaci\u00f3n en macOS","text":"<ul> <li>Instalaci\u00f3n de AWS CLI desde la interfaz de usuario.</li> <li>Instalaci\u00f3n de AWS CLI desde la l\u00ednea de comandos.</li> </ul>"},{"location":"practicas13/practica13_1/#123-instalacion-en-windows","title":"1.2.3 Instalaci\u00f3n en Windows","text":"<ul> <li>Instalaci\u00f3n de AWS CLI desde la interfaz de usuario.</li> </ul>"},{"location":"practicas13/practica13_1/#13-configuracion-de-aws-cli","title":"1.3 Configuraci\u00f3n de AWS CLI","text":""},{"location":"practicas13/practica13_1/#131-opcion-1-con-el-comando-aws-configure","title":"1.3.1 Opci\u00f3n 1. Con el comando <code>aws configure</code>","text":"<p>Para configurar AWS CLI ejecutaremos el siguiente comando.</p> <pre><code>aws configure\n</code></pre> <p>Este comando preguntar\u00e1 por los siguientes datos:</p> <pre><code>AWS Access Key ID [None]: \nAWS Secret Access Key [None]: \nDefault region name [None]: \nDefault output format [None]:\n</code></pre> <p>Con los que crear\u00e1 un archivo de texto llamado <code>credentials</code> dentro del directorio home del usuario. * En Linux se encuentra en la ruta <code>~/.aws/credentials</code>. * En Windows estar\u00e1 en la ruta: <code>C:\\Users\\usuario\\.aws\\credentials</code>.</p>"},{"location":"practicas13/practica13_1/#131-opcion-2-copiando-el-contenido-del-archivo-credentials-de-aws-academy","title":"1.3.1 Opci\u00f3n 2. Copiando el contenido del archivo <code>credentials</code> de AWS Academy.","text":"<p>Si queremos utilizar las credenciales de AWS Academy solo tenemos que copiar en el archivo ~/.aws/credentials los datos que nos aparecen en el apartado AWS Details -&gt; Cloud Access -&gt; AWS CLI, dentro del Learner Lab de AWS Academy.</p> <p>Ejemplo de un archivo <code>credentials</code>.</p> <pre><code>[default]\naws_access_key_id=BSICYBW38QHVAVV7P365\naws_secret_access_key=DE/CB2FGCx8EV34x0EtuZfJg39E7hapZ9suhXBzF\naws_session_token=FwoGZXIvYXdzECkaDAGFN5okYCHateFXISK9AYwT4gghzz5hIr6TZs9X8pQaOYPZvTCNSrLtJoaw/fEwz9...XBzH\n</code></pre> <p>Para configurar la regi\u00f3n de AWS a utilizar y el formato de salida se puede ejecutar el comando <code>aws configure</code> de nuevo o abrir el archivo <code>config</code> dentro del directorio <code>.aws</code> y agregar los siguientes datos:</p> <ul> <li>Regi\u00f3n: <code>us-east-1</code></li> <li>Formato de salida: <code>json</code></li> </ul> <p>Ejemplo de un archivo <code>config</code>.</p> <pre><code>[default]\nregion = us-east-1\noutput = json\n</code></pre>"},{"location":"practicas13/practica13_1/#14-ejercicios","title":"1.4 Ejercicios","text":""},{"location":"practicas13/practica13_1/#estructura","title":"Estructura","text":"<pre><code>\u251c\u2500\u2500 Ejercicio01\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u2502   \u2514\u2500\u2500 create_sg.sh\n\u2502   \u2514\u2500\u2500 variables\n\u2502       \u2514\u2500\u2500 vars.sh\n\u251c\u2500\u2500 Ejercicio02\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u2502   \u2514\u2500\u2500 run_instance.sh\n\u2502   \u2514\u2500\u2500 variables\n\u2502       \u2514\u2500\u2500 vars.sh\n\u251c\u2500\u2500 Ejercicio03\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u2502   \u251c\u2500\u2500 eliminar_practica9.sh\n\u2502   \u2502   \u2514\u2500\u2500 montar_practica9.sh\n\u2502   \u2514\u2500\u2500 variables\n\u2502       \u2514\u2500\u2500 vars.sh\n\u251c\u2500\u2500 Ejercicio04\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u2502   \u251c\u2500\u2500 00-terminate_all_instances.sh\n\u2502   \u2502   \u251c\u2500\u2500 01-delete_all_security_groups.sh\n\u2502   \u2502   \u251c\u2500\u2500 02-delete_all_elastic_ips.sh\n\u2502   \u2502   \u251c\u2500\u2500 03-create_security_groups.sh\n\u2502   \u2502   \u251c\u2500\u2500 04-create_instances.sh\n\u2502   \u2502   \u251c\u2500\u2500 05-create_elastic_ip.sh\n\u2502   \u2502   \u2514\u2500\u2500 user-data.sh\n\u2502   \u2514\u2500\u2500 variables\n\u2502       \u2514\u2500\u2500 vars.sh\n\u251c\u2500\u2500 Ejercicio05\n\u2502   \u2514\u2500\u2500 scripts\n\u2502       \u2514\u2500\u2500 mostrar_info.sh\n\u251c\u2500\u2500 img\n\u2502   \u2514\u2500\u2500 logo.png\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"practicas13/practica13_1/#141-ejercicio-1","title":"1.4.1 Ejercicio 1","text":"<ul> <li>Crea un grupo de seguridad para las m\u00e1quinas del Backend con el nombre backend-sg.</li> <li>A\u00f1ada las siguientes reglas al grupo de seguridad:<ul> <li>Acceso SSH (puerto 22/TCP) desde cualquier direcci\u00f3n IP.</li> <li>Acceso al puerto 3306/TCP desde cualquier direcci\u00f3n IP.</li> </ul> </li> </ul> <p>Soluci\u00f3n:</p> <pre><code>#!/bin/bash\nset -x\n# ----------------------------------------------------------------------\n# Variables de Configuraci\u00f3n\n# ----------------------------------------------------------------------\nsource \"$(dirname \"${BASH_SOURCE[0]}\")/../variables/vars.sh\"\n\n\n# Deshabilitamos la paginaci\u00f3n de la salida de los comandos de AWS CLI\n# Referencia: https://docs.aws.amazon.com/es_es/cli/latest/userguide/cliv2-migration.html#cliv2-migration-output-pager\nexport AWS_PAGER=\"\"\n\n# Creamos el grupo de seguridad: backend-sg\naws ec2 create-security-group \\\n    --group-name $GROUP_NAME \\\n    --description \"Grupo de Seguridad $GROUP_NAME para maquinas Backend\"\n\n# Creamos una regla de accesso SSH desde cualquier IP\naws ec2 authorize-security-group-ingress \\\n    --group-name $GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_01 \\\n    --cidr $NETWORK_01\n\n# Creamos una regla de accesso para el puerto 3306 desde cualquier IP\naws ec2 authorize-security-group-ingress \\\n    --group-name $GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_02 \\\n    --cidr $NETWORK_01\n</code></pre>"},{"location":"practicas13/practica13_1/#142-ejercicio-2","title":"1.4.2 Ejercicio 2","text":"<ul> <li> <p>Crea una instancia EC2 para la m\u00e1quina del Backend con las siguientes caracter\u00edsticas.</p> <ul> <li>Identificador de la AMI: ami-08e637cea2f053dfa. Esta AMI se corresponde con la imagen Red Hat Enterprise Linux 9 (HVM).</li> <li>N\u00famero de instancias: 1</li> <li>Tipo de instancia: t2.micro</li> <li>Clave privada: vockey</li> <li>Grupo de seguridad: * backend-sg</li> <li>Nombre de la instancia: backend</li> </ul> </li> </ul> <p>Soluci\u00f3n:</p> <pre><code>#!/bin/bash\nset -x\n# ----------------------------------------------------------------------\n# Variables de Configuraci\u00f3n\n# ----------------------------------------------------------------------\nsource \"$(dirname \"${BASH_SOURCE[0]}\")/../variables/vars.sh\"\n\n# Deshabilitamos la paginaci\u00f3n de la salida de los comandos de AWS CLI\n# Referencia: https://docs.aws.amazon.com/es_es/cli/latest/userguide/cliv2-migration.html#cliv2-migration-output-pager\nexport AWS_PAGER=\"\"\n\n# Creamos una intancia EC2 con el Identificador AMI correspondiente a Red Hat Enterprise Linux 9.\naws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --instance-type $INSTANCE_TYPE \\\n    --key-name $KEY_NAME \\\n    --security-group-ids $SECURITY_GROUP_BACKEND \\\n    --count $COUNT \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_BACKEND}]\"\n</code></pre>"},{"location":"practicas13/practica13_1/#143-ejercicio-3","title":"1.4.3 Ejercicio 3","text":"<ul> <li>Crear un script para crear la infraestructura de la pr\u00e1ctica 9.</li> <li>Crear un script para eliminar la infraestructura de la pr\u00e1ctica 9.</li> </ul> <p>Soluci\u00f3n para montar la infraestructura:</p> <pre><code>#!/bin/bash\nset -x\n# ----------------------------------------------------------------------\n# Variables de Configuraci\u00f3n\n# ----------------------------------------------------------------------\nsource \"$(dirname \"${BASH_SOURCE[0]}\")/../variables/vars.sh\"\n\n# Deshabilitamos la paginaci\u00f3n de la salida de los comandos de AWS CLI\n# Referencia: https://docs.aws.amazon.com/es_es/cli/latest/userguide/cliv2-migration.html#cliv2-migration-output-pager\nexport AWS_PAGER=\"\"\n\n##################################################################################################################################\n\n# Creamos el grupo de seguridad: FrontEndSecurityGroup\naws ec2 create-security-group \\\n    --group-name $FRONTEND_GROUP_NAME \\\n    --description \"Grupo de Seguridad $FRONTEND_GROUP_NAME para maquinas FrontEnd.\"\n\n# Creamos una regla de accesso SSH desde cualquier IP\naws ec2 authorize-security-group-ingress \\\n    --group-name $FRONTEND_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_01_FRONTEND \\\n    --cidr $NETWORK_01\n\n# Creamos una regla de accesso para el puerto HTTP\naws ec2 authorize-security-group-ingress \\\n    --group-name $FRONTEND_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_02_FRONTEND \\\n    --cidr $NETWORK_01\n\n##################################################################################################################################\n\n# Creamos el grupo de seguridad: BackEndSecurityGroup\naws ec2 create-security-group \\\n    --group-name $BACKEND_GROUP_NAME \\\n    --description \"Grupo de Seguridad $BACKEND_GROUP_NAME para maquinas BackEnd.\"\n\n# Creamos una regla de accesso SSH desde cualquier IP\naws ec2 authorize-security-group-ingress \\\n    --group-name $BACKEND_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_01_BACKEND \\\n    --cidr $NETWORK_01\n\n# Creamos una regla de accesso para el puerto 3306 desde cualquier IP\naws ec2 authorize-security-group-ingress \\\n    --group-name $BACKEND_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_02_BACKEND \\\n    --cidr $NETWORK_01\n##################################################################################################################################\n\n# Creamos el grupo de seguridad: NFS\naws ec2 create-security-group \\\n    --group-name $NFS_GROUP_NAME \\\n    --description \"Grupo de Seguridad $NFS_GROUP_NAME para maquinas servidor NFS.\"\n\n# Creamos una regla de accesso SSH\naws ec2 authorize-security-group-ingress \\\n    --group-name $NFS_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_01_NFS \\\n    --cidr $NETWORK_01\n\n# Creamos una regla de accesso para MySQL\naws ec2 authorize-security-group-ingress \\\n    --group-name $NFS_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_02_NFS \\\n    --cidr $NETWORK_01\n\n##################################################################################################################################\n\n# Creamos el grupo de seguridad: BALANCEADOR\naws ec2 create-security-group \\\n    --group-name $LOADBALANCER_GROUP_NAME \\\n    --description \"Grupo de Seguridad $LOADBALANCER_GROUP_NAME para maquinas Balanceador de carga.\"\n\n# Creamos una regla de accesso SSH\naws ec2 authorize-security-group-ingress \\\n    --group-name $LOADBALANCER_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_01_LOAD_BALANCER \\\n    --cidr $NETWORK_01\n\n# Creamos una regla de accesso HTTP\naws ec2 authorize-security-group-ingress \\\n    --group-name $LOADBALANCER_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_02_LOAD_BALANCER \\\n    --cidr $NETWORK_01\n\n# Creamos una regla de accesso HTTPS\naws ec2 authorize-security-group-ingress \\\n    --group-name $LOADBALANCER_GROUP_NAME \\\n    --protocol $PROTOCOL_01 \\\n    --port $PORT_03_LOAD_BALANCER \\\n    --cidr $NETWORK_01\n\n######################################                      Instancias                      ##########################################################\n\n# Creamos una intancia EC2 Balanceador de carga.\naws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --instance-type $INSTANCE_TYPE02 \\\n    --key-name $KEY_NAME \\\n    --security-group-ids $LOADBALANCER_GROUP_NAME \\\n    --count $COUNT \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_LOADBALANCER}]\"\n\n##################################################################################################################################\n\n# Creamos una intancia EC2 FrontEnd01.\naws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --instance-type $INSTANCE_TYPE01 \\\n    --key-name $KEY_NAME \\\n    --security-group-ids $FRONTEND_GROUP_NAME \\\n    --count $COUNT \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_FRONTEND01}]\"\n\n##################################################################################################################################\n\n# Creamos una intancia EC2 FrontEnd02.\naws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --instance-type $INSTANCE_TYPE01 \\\n    --key-name $KEY_NAME \\\n    --security-group-ids $FRONTEND_GROUP_NAME \\\n    --count $COUNT \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_FRONTEND02}]\"\n\n##################################################################################################################################\n\n# Creamos una intancia EC2 BackEnd.\naws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --instance-type $INSTANCE_TYPE02 \\\n    --key-name $KEY_NAME \\\n    --security-group-ids $BACKEND_GROUP_NAME \\\n    --count $COUNT \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_BACKEND}]\"\n\n##################################################################################################################################\n\n# Creamos una intancia EC2 Servidor NFS.\naws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --instance-type $INSTANCE_TYPE02 \\\n    --key-name $KEY_NAME \\\n    --security-group-ids $NFS_GROUP_NAME \\\n    --count $COUNT \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_NFS}]\"\n\n##################################################################################################################################\n\nsleep 15\n\n# Obtenemos el Id de la instancia a partir de su nombre\nINSTANCE_ID=$(aws ec2 describe-instances \\\n            --filters \"Name=tag:Name,Values=$INSTANCE_NAME_LOADBALANCER\" \\\n                      \"Name=instance-state-name,Values=running\" \\\n            --query \"Reservations[*].Instances[*].InstanceId\" \\\n            --output text)\n\n# Creamos una IP el\u00e1stica\nELASTIC_IP=$(aws ec2 allocate-address --query PublicIp --output text)\n\n# Asociamos la IP el\u00e1stica a la instancia del balanceador\naws ec2 associate-address --instance-id $INSTANCE_ID --public-ip $ELASTIC_IP\n</code></pre> <p>Soluci\u00f3n para eliminar la infraestructura:</p> <pre><code>#!/bin/bash\nset -x\n# ----------------------------------------------------------------------\n# Variables de Configuraci\u00f3n\n# ----------------------------------------------------------------------\nsource \"$(dirname \"${BASH_SOURCE[0]}\")/../variables/vars.sh\"\n\n# Deshabilitamos la paginaci\u00f3n de la salida de los comandos de AWS CLI\n# Referencia: https://docs.aws.amazon.com/es_es/cli/latest/userguide/cliv2-migration.html#cliv2-migration-output-pager\nexport AWS_PAGER=\"\"\n\n# Eliminar instancias en ejecuci\u00f3n con los siguientes nombres\nnames=(\"$INSTANCE_NAME_FRONTEND01\" \"$INSTANCE_NAME_FRONTEND02\" \"$INSTANCE_NAME_BACKEND\" \"$INSTANCE_NAME_NFS\" \"$INSTANCE_NAME_LOADBALANCER\")\n\nfor name in \"${names[@]}\"; do\n    instance_id=$(aws ec2 describe-instances \\\n        --filters \"Name=tag:Name,Values=$name\" \"Name=instance-state-name,Values=running\" \\\n        --query 'Reservations[*].Instances[*].[InstanceId]' --output text)\n\n    if [ -z \"$instance_id\" ]; then\n        echo \"No se encontraron instancias en ejecuci\u00f3n con el nombre $name\"\n        continue\n    fi\n\n    # Obtiene el ID de la IP el\u00e1stica asociada a la instancia\n    EIP_ID=$(aws ec2 describe-addresses --filters \"Name=instance-id,Values=$instance_id\" --query \"Addresses[].AllocationId\" --output text)\n    # Elimina la IP el\u00e1stica\n    aws ec2 release-address --allocation-id $EIP_ID\n\n    echo \"Eliminando instancia en ejecuci\u00f3n con el nombre $name y ID $instance_id...\"\n    aws ec2 terminate-instances --instance-ids $instance_id\n\ndone\n\n# Esperar 25 segundos\necho \"Esperando 25 segundos...\"\nsleep 25\n\n# Eliminar grupos de seguridad\nsecurity_groups=($FRONTEND_GROUP_NAME $BACKEND_GROUP_NAME $NFS_GROUP_NAME $LOADBALANCER_GROUP_NAME)\n\nfor security_group in \"${security_groups[@]}\"; do\n    group_id=$(aws ec2 describe-security-groups \\\n        --filters \"Name=group-name,Values=$security_group\" \\\n        --query 'SecurityGroups[*].[GroupId]' --output text)\n\n    if [ -z \"$group_id\" ]; then\n        echo \"No se encontr\u00f3 ning\u00fan grupo de seguridad con el nombre $security_group\"\n        continue\n    fi\n\n    echo \"Eliminando grupo de seguridad con el nombre $security_group y ID $group_id...\"\n    aws ec2 delete-security-group --group-id $group_id\ndone\n</code></pre>"},{"location":"practicas13/practica13_1/#144-ejercicio-4","title":"1.4.4 Ejercicio 4","text":"<p>Modifique los scripts del repositorio de ejemplo:</p> <ul> <li>https://github.com/josejuansanchez/practica-aws-cli</li> </ul> <p>para que utilicen la siguiente AMI.</p> <ul> <li>Nombre de la AMI: Ubuntu Server 22.04 LTS (HVM).</li> <li>Identificador de la AMI: ami-06878d265978313ca.</li> </ul> <p>Tambi\u00e9n tendr\u00e1 que modificar los scripts para que se ejecute el siguiente comando en las instancias durante el inicio.</p> <pre><code>$ sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre> <p>Soluci\u00f3n:</p> <p>A\u00f1adir la siguiente l\u00ednea a los scripts del repositorio de ejemplo:</p> <pre><code>--user-data file://user-data.sh\n</code></pre> <p>Donde <code>user-data.sh</code> es un archivo de script para shell con el siguiente c\u00f3digo:</p> <pre><code>#!/bin/bash\nset -x\n# Actualizaci\u00f3n de repositorios.\napt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"practicas13/practica13_1/#145-ejercicio-5","title":"1.4.5 Ejercicio 5","text":"<p>Escriba un script de bash que muestre el nombre de todas instancias EC2 que tiene en ejecuci\u00f3n junto a su direcci\u00f3n IP p\u00fablica.</p> <p>Soluci\u00f3n:</p> <pre><code>#!/bin/bash\n\n# Obtener las IDs de todas las instancias EC2 en ejecuci\u00f3n\ninstance_ids=$(aws ec2 describe-instances --filters \"Name=instance-state-name,Values=running\" --query \"Reservations[*].Instances[*].InstanceId\" --output text)\n\n# Para cada ID de instancia, obtener su nombre y direcci\u00f3n IP p\u00fablica\nfor instance_id in $instance_ids\ndo\n  name=$(aws ec2 describe-tags --filters \"Name=resource-id,Values=$instance_id\" \"Name=key,Values=Name\" --query \"Tags[0].Value\" --output text)\n  public_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query \"Reservations[0].Instances[0].PublicIpAddress\" --output text)\n\n  # Imprimir el nombre y la direcci\u00f3n IP p\u00fablica de la instancia\n  echo \"$name: $public_ip\"\ndone\n</code></pre>"},{"location":"practicas13/practica13_2/","title":"IAW - Pr\u00e1ctica 13.2 AWS CloudFormation","text":"<p>AWS CloudFormation es un servicio que permite modelar y configurar recursos de AWS con el fin de automatizar la creaci\u00f3n y gesti\u00f3n de recusos en AWS a partir de una plantilla.</p> <p></p>"},{"location":"practicas13/practica13_2/#1-ventajas-e-inconvenientes","title":"1 Ventajas e Inconvenientes","text":"<p>Algunas de las ventajas que nos ofrece este servicio son:</p> <ul> <li>Permite automatizar la creaci\u00f3n de recursos, reduciendo as\u00ed posibles errores en el proceso de creaci\u00f3n de forma manual.</li> <li>Permite reutilizar plantillas para otros proyectos y configuraciones.</li> <li>Garantizamos que todos los entornos que creamos con las plantillas son id\u00e9nticos.</li> <li>Permite tener una documentaci\u00f3n de los recursos que creamos.</li> <li>Podemos utilizar un control de versiones para controlar los cambios que se realizan en las plantillas.</li> </ul> <p>Algunos de los inconvenientes que podemos encontrar son:</p> <ul> <li>Es un servicio exclusivo de AWS, por lo que no podemos utilizarlo para crear recursos en otros proveedores de servicios en la nube.</li> <li>No est\u00e1n disponibles todos los servicios de AWS.</li> <li>Aunque AWS nos proporciona la herramienta AWS CloudFormation Designer para crear las plantillas, a veces puede ser un poco complicado describir la infraestructura que necesitamos.</li> </ul>"},{"location":"practicas13/practica13_2/#12-gestion-de-stacks-desde-la-linea-de-comandos-con-aws-cli","title":"1.2 Gesti\u00f3n de stacks desde la l\u00ednea de comandos con AWS CLI","text":""},{"location":"practicas13/practica13_2/#121-crear-un-stack","title":"1.2.1 Crear un stack","text":"<p>La plantilla o template es un archivo JSON o YAML que describe los recursos y configuraciones que queremos crear en AWS.</p> <p>Un stack o una pila, es una colecci\u00f3n de recursos de infraestructura que se crean a partir de una plantilla.</p> <p>Para crear una pila de AWS CloudFormation desde la l\u00ednea de comandos con AWS podemos ejecutar el siguiente comando:</p> <pre><code>aws cloudformation create-stack \\\n    --stack-name &lt;nombre_del_stack&gt; \\\n    --template-body file://&lt;path-de-la_plantilla&gt;\n</code></pre> <p>Donde <code>&lt;nombre_del_stack&gt;</code> es el nombre que queremos darle a la pila y <code>&lt;path-de-la_plantilla&gt;</code> es la ruta del archivo que contiene la plantilla.</p> <p>NOTA: Las dobles barras <code>//</code> son absolutamente necesarias.</p> <p>Si la plantilla contiene par\u00e1metros, podemos especificarlos en la l\u00ednea de comandos con el par\u00e1metro <code>--parameters</code>:</p> <pre><code>aws cloudformation create-stack \\\n--stack-name ejemplo-05 \\\n--template-body file://ejemplo-05/ec2.yaml \\\n--parameters ParameterKey=KeyName,ParameterValue=vockey \\\n            ParameterKey=InstanceType,ParameterValue=t2.small \\\n            ParameterKey=ImageId,ParameterValue=ami-08e637cea2f053dfa\n</code></pre>"},{"location":"practicas13/practica13_2/#122-listado-de-stacks","title":"1.2.2 Listado de stacks","text":"<p>Para obtener un listado informaci\u00f3n b\u00e1sica de los stacks, como el nombre, el estado actual y la fecha de creaci\u00f3n, se utiliza el comando:</p> <pre><code>aws cloudformation list-stacks\n</code></pre> <p>Para obtener un listado con informaci\u00f3n m\u00e1s detallada, se utiliza el comando:</p> <pre><code>aws cloudformation describe-stacks\n</code></pre> <p>Tambi\u00e9n es posible consultar informaci\u00f3n de un stack espec\u00edfico con el comando:</p> <pre><code>aws cloudformation describe-stacks --stack-name &lt;nombre_stack&gt;\n</code></pre>"},{"location":"practicas13/practica13_2/#123-eliminar-un-stack","title":"1.2.3 Eliminar un stack","text":"<p>Para eliminar un stack y todos los recursos asociados, se utiliza el comando:</p> <pre><code>aws cloudformation delete-stack --stack-name &lt;nombre_stack&gt;\n</code></pre>"},{"location":"practicas13/practica13_2/#13-ejercicios","title":"1.3 Ejercicios","text":""},{"location":"practicas13/practica13_2/#131-ejercicio-1","title":"1.3.1 Ejercicio 1","text":"<p>Escriba una plantilla de AWS CloudFormation que cree la infraestructura necesaria para desplegar la aplicaci\u00f3n web propuesta en la pr\u00e1ctica 7.</p> <p>Soluci\u00f3n:</p> <pre><code>AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: |\n  Esta plantilla crea la infraestructura necesaria para la implantaci\u00f3n de una aplicaci\u00f3n Web\n  Lamp en dos niveles (pr\u00e1ctica 7), formada por una capa de front-end con un servidor web Apache HTTP Server\n  y una capa de back-end con un servidor MySQL.\n\nResources:\n  # Creaci\u00f3n de la instancia FrontEnd\n  FrontEndSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Grupo de seguridad de la capa frontend.\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: 0.0.0.0/0\n  FrontEndInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-06878d265978313ca\n      InstanceType: t2.small\n      SecurityGroups:\n        - !Ref FrontEndSecurityGroup\n      KeyName: vockey\n      Tags:\n        - Key: Name\n          Value: FrontEnd\n  MyEIP:\n    Type: AWS::EC2::EIP\n  MyEIPAssociation:\n    Type: AWS::EC2::EIPAssociation\n    DependsOn: MyEIP\n    Properties:\n      AllocationId: !GetAtt MyEIP.AllocationId\n      InstanceId: !Ref FrontEndInstance\n  # Creaci\u00f3n de la instancia BackEnd\n  BackEndSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Grupo de seguridad de la capa backend.\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 3306\n          ToPort: 3306\n          CidrIp: 0.0.0.0/0\n  BackEndInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-06878d265978313ca\n      InstanceType: t2.small\n      SecurityGroups:\n        - !Ref BackEndSecurityGroup\n      KeyName: vockey\n      Tags:\n        - Key: Name\n          Value: BackEnd\n</code></pre>"},{"location":"practicas13/practica13_2/#132-ejercicio-2","title":"1.3.2 Ejercicio 2","text":"<p>Escriba una plantilla de AWS CloudFormation que cree la infraestructura necesaria para desplegar la aplicaci\u00f3n web propuesta en la pr\u00e1ctica 9.</p> <p>Soluci\u00f3n:</p> <pre><code>AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: |\n  Esta plantilla crea la infraestructura necesaria para la implantaci\u00f3n de una aplicaci\u00f3n Web\n  Lamp en dos niveles (pr\u00e1ctica 7), formada por una capa de front-end con un servidor web Apache HTTP Server\n  y una capa de back-end con un servidor MySQL.\n\nResources:\n  # Creaci\u00f3n de la instancia balanceador de carga\n  BalancerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Grupo de seguridad del balanceador de carga.\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: 0.0.0.0/0\n  BalancerInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-06878d265978313ca\n      InstanceType: t2.medium\n      SecurityGroups:\n        - !Ref BalancerSecurityGroup\n      KeyName: vockey\n      Tags:\n        - Key: Name\n          Value: Balancer\n  MyEIP:\n    Type: AWS::EC2::EIP\n  MyEIPAssociation:\n    Type: AWS::EC2::EIPAssociation\n    DependsOn: MyEIP\n    Properties:\n      AllocationId: !GetAtt MyEIP.AllocationId\n      InstanceId: !Ref BalancerInstance\n\n  # Creaci\u00f3n de la instancia FrontEnd-01\n  FrontEndSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Grupo de seguridad de la instancia FrontEnd-01.\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: 0.0.0.0/0\n  FrontEnd01Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-06878d265978313ca\n      InstanceType: t2.small\n      SecurityGroups:\n        - !Ref FrontEndSecurityGroup\n      KeyName: vockey\n      Tags:\n        - Key: Name\n          Value: FrontEnd-01\n\n  # Creaci\u00f3n de la instancia FrontEnd-02\n  FrontEnd02Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-06878d265978313ca\n      InstanceType: t2.small\n      SecurityGroups:\n        - !Ref FrontEndSecurityGroup\n      KeyName: vockey\n      Tags:\n        - Key: Name\n          Value: FrontEnd-02\n\n  # Creaci\u00f3n de la instancia Servidor NFS\n  NFSServerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Grupo de seguridad del servidor NFS.\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 2048\n          ToPort: 2048\n          CidrIp: 0.0.0.0/0\n  NFSServerInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-06878d265978313ca\n      InstanceType: t2.small\n      SecurityGroups:\n        - !Ref NFSServerSecurityGroup\n      KeyName: vockey\n      Tags:\n        - Key: Name\n          Value: NFS-Server\n\n  # Creaci\u00f3n de la instancia BackEnd\n  BackEndSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Grupo de seguridad de la capa backend.\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 3306\n          ToPort: 3306\n          CidrIp: 0.0.0.0/0\n  BackEndInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-06878d265978313ca\n      InstanceType: t2.small\n      SecurityGroups:\n        - !Ref BackEndSecurityGroup\n      KeyName: vockey\n      Tags:\n        - Key: Name\n          Value: BackEnd\n</code></pre>"},{"location":"practicas13/practica13_3/","title":"IAW - Pr\u00e1ctica 13.3 AWS SDK para Python (Boto3)","text":""},{"location":"practicas13/practica13_3/#que-es-boto3","title":"\u00bfQu\u00e9 es Boto3?","text":"<p>Boto3 es un SDK (Software Development Kit) de Python desarrollado por y para Amazon Web Services (AWS). Este SDK permite a los desarrolladores interactuar con los servicios de AWS para crear y gestionar recursos como grupos de seguridad o instancias EC2, a trav\u00e9s de aplicaciones escritas en Python.</p>"},{"location":"practicas13/practica13_3/#ejercicios","title":"Ejercicios","text":"<p>En esta pr\u00e1ctica se realiz\u00f3 la creaci\u00f3n de las infraestructuras necesarias para cumplir con la descripci\u00f3n de los ejercicios dados. Para ello se utilizar\u00e1n las funcionalidades de aws-python-boto3</p>"},{"location":"practicas13/practica13_3/#estructura","title":"Estructura","text":"<pre><code>.\n\u251c\u2500\u2500 common\n\u2502   \u251c\u2500\u2500 aws_resource_class.py\n\u2502   \u251c\u2500\u2500 aws_resource_functions.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 scripts\n    \u251c\u2500\u2500 Ejercicio01.py\n    \u251c\u2500\u2500 Ejercicio02.py\n    \u251c\u2500\u2500 Ejercicio03_montar.py\n    \u251c\u2500\u2500 Ejercicio03_tirar.py\n    \u251c\u2500\u2500 Ejercicio04.py\n    \u251c\u2500\u2500 __pycache__\n    \u2502   \u251c\u2500\u2500 vars2.cpython-310.pyc\n    \u2502   \u251c\u2500\u2500 vars3.cpython-310.pyc\n    \u2502   \u2514\u2500\u2500 vars.cpython-310.pyc\n    \u251c\u2500\u2500 vars2.py\n    \u251c\u2500\u2500 vars3.py\n    \u2514\u2500\u2500 vars.py\n</code></pre>"},{"location":"practicas13/practica13_3/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escriba un script de Python para crear un grupo de seguridad con el nombre <code>backend-sg</code>. A\u00f1ada las siguientes reglas al grupo de seguridad:</p> <ul> <li>Acceso SSH (puerto 22/TCP) desde cualquier direcci\u00f3n IP.</li> <li>Acceso al puerto 3306/TCP desde cualquier direcci\u00f3n IP.</li> </ul> <p>Soluci\u00f3n:</p> <pre><code>from common import aws_resource_functions as aws\n\nimport vars as vars\n\n# Security group ingress permissions\ningress_permissions = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.ssh_port, 'ToPort': vars.ssh_port},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.mysql_port, 'ToPort': vars.mysql_port}]\n\n\n# Es posible usar las siguientes sentencias en vez de utilizar variables.\n# Read security group name and description\n#sg_name = input('Security group name: ')\n#sg_description = input('Security group description: ')\n\n# Creamos el grupo de seguridad\naws.create_security_group(vars.group_name, vars.group_description, ingress_permissions)\n\n# Se listar\u00e1n en pantalla los grupos de seguridad\naws.list_security_groups()\n</code></pre>"},{"location":"practicas13/practica13_3/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escriba un script de Python para crear una instancia EC2 que tengas las siguientes caracter\u00edsticas.</p> <ul> <li>Identificador de la AMI: ami-08e637cea2f053dfa. Esta AMI se corresponde con la imagen Red Hat Enterprise Linux 9 (HVM).</li> <li>N\u00famero de instancias: 1</li> <li>Tipo de instancia: t2.micro</li> <li>Clave privada: vockey</li> <li>Grupo de seguridad: backend-sg</li> <li>Nombre de la instancia: backend</li> </ul> <p>Soluci\u00f3n:</p> <pre><code>from common import aws_resource_functions as aws\n\nimport vars2 as vars\n\n\n# Check if security group exists\nif aws.security_group_exists(vars.sg_name) == False:\n    print('The security group does not exist')\n    exit()\n\n# Create the instance\naws.create_instance(vars.ami, vars.count, vars.instance_type, vars.key_name, vars.instance_name, vars.sg_name)\n\n# List instances\naws.list_instances()\n</code></pre>"},{"location":"practicas13/practica13_3/#ejercicio-3","title":"Ejercicio 3","text":"<ul> <li>Crea un script para crear la infraestructura de la pr\u00e1ctica 9.</li> </ul> <p>Soluci\u00f3n:</p> <pre><code>from common import aws_resource_functions as aws\n\nimport vars3 as vars\n\n# Grupo de seguridad para m\u00e1quinas BackEnd\nbackend_ingress_permissions = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.ssh_port, 'ToPort': vars.ssh_port},        \n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.mysql_port, 'ToPort': vars.mysql_port}]\n\n# Grupo de seguridad para m\u00e1quinas frontend\nfrontend_ingress_permissions = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.ssh_port, 'ToPort': vars.ssh_port},        \n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.mysql_port, 'ToPort': vars.mysql_port},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.https_port, 'ToPort': vars.https_port}]\n\n# Grupo de seguridad para el balanceador de carga\nbalancer_ingress_permissions = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.ssh_port, 'ToPort': vars.ssh_port},        \n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.http_port, 'ToPort': vars.http_port},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.https_port, 'ToPort': vars.https_port}]\n\n# Grupo de seguridad para el servidor NFS\nnfs_ingress_permissions = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.ssh_port, 'ToPort': vars.ssh_port},        \n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': vars.nfs_port, 'ToPort': vars.nfs_port}]\n\n\npermissions = {\n    'BackEndSecurityGroup': backend_ingress_permissions,\n    'FrontEndSecurityGroup': frontend_ingress_permissions,\n    'LoadBalancerSecurityGroup': balancer_ingress_permissions,\n    'NFSServerSecurityGroup': nfs_ingress_permissions\n}\n\nfor group_name in [vars.backend_sg, vars.frontend_sg,vars.loadbalancer_sg,vars.nfs_sg]:\n    group_description = vars.security_groups[group_name]\n    ingress_permissions= permissions[group_name]\n\n    if aws.security_group_exists(group_name):\n        print(f\"El grupo de seguridad {group_name} ya existe.\")\n    else:\n        aws.create_security_group(group_name, group_description, ingress_permissions)\n        print(f\"El grupo de seguridad {group_name} ha sido creado.\")\n\n\n# Creamos las instancias\naws.create_instance(vars.ami, vars.count, vars.instance_type_med, vars.key_name, vars.instance_name_lb, vars.loadbalancer_sg)\naws.create_instance(vars.ami, vars.count, vars.instance_type_sma, vars.key_name, vars.instance_name_frontend01, vars.frontend_sg)\naws.create_instance(vars.ami, vars.count, vars.instance_type_sma, vars.key_name, vars.instance_name_frontend02, vars.frontend_sg)\naws.create_instance(vars.ami, vars.count, vars.instance_type_med, vars.key_name, vars.instance_name_backend, vars.backend_sg)\naws.create_instance(vars.ami, vars.count, vars.instance_type_sma, vars.key_name, vars.instance_name_nfs, vars.nfs_sg)\n\n# Get Elastic IP from instance ID\nload_balancer_id = aws.get_instance_id(vars.instance_name_lb)\n\n# Alocar IP El\u00e1stica\nelastic_ip = aws.allocate_elastic_ip()\n# Asociar Ip El\u00e1stica\naws.associate_elastic_ip(elastic_ip, load_balancer_id)\n\n# Listado de instancias\naws.list_instances()\n</code></pre> <ul> <li>Crea un script para eliminar la infraestructura de la pr\u00e1ctica 9.</li> </ul> <p>Soluci\u00f3n:</p> <pre><code>from common import aws_resource_functions as aws\n\nimport vars3 as vars\nimport time\n\n# Lista de nombres de los grupos de seguridad y de las instancias que queremos eliminar\ngroup_names = [vars.backend_sg, vars.frontend_sg, vars.loadbalancer_sg, vars.nfs_sg]\ninstance_names = [vars.instance_name_backend, vars.instance_name_frontend01, \n                  vars.instance_name_frontend02, vars.instance_name_lb, \n                  vars.instance_name_nfs]\n\n# Obtenemos el ID del balanceador de carga\nload_balancer_id = aws.get_instance_id(vars.instance_name_lb)\n\n# Se comproba su existencia\nif load_balancer_id == None:\n    print('No hay ninguna instancia con ese nombre.')\n    exit()\n#else:\n    # Obtener IP el\u00e1stica de ID de instancia\n    #elastic_ip = aws.get_instance_public_ip(load_balancer_id)\n\n    # Release Elastic IP\n    #aws.release_elastic_ip(elastic_ip)\n\nfor instance in instance_names:\n    print(f'Terminando la instancia {instance}...')\n    aws.terminate_instance(instance)\n\nprint('Esperando 30 segundos para resolver posibles errores de dependencia.')\ntime.sleep(30)\n\nfor sg in group_names:\n    print(f'Eliminando grupo de seguridad {sg}...')\n    aws.delete_security_group(sg)\n\n</code></pre>"},{"location":"practicas13/practica13_3/#ejercicio-4","title":"Ejercicio 4","text":"<p>Modifique los ejemplos 7 y 14 de este repositorio que utilizan <code>boto3.resource</code>, para a\u00f1adir una nuevas funcionalidades. Por ejemplo, a la hora de crear una nueva instancia EC2 el programa puede mostrar al usuario una lista de AMIs disponibles y una lista de tipos de instancia.</p> <p>Soluci\u00f3n:</p> <pre><code>from common import aws_resource_functions as aws\n\nimport os\nimport time\n\ndef show_menu():\n    print('\\n-- Security Group --')\n    print(' 1. Create security group')\n    print(' 2. Delete security group')\n    print(' 3. List security groups')\n    print('-- EC2 Instance --')\n    print(' 4. Create EC2 instance')\n    print(' 5. Start EC2 instance')\n    print(' 6. Stop EC2 instance')\n    print(' 7. Terminate EC2 instance')\n    print('-- EC2 Instances --')    \n    print(' 8. List all EC2 instances')\n    print(' 9. Start all EC2 instances')\n    print(' 10. Stop all EC2 instances')\n    print(' 11. Terminate all EC2 instances')\n    print('-- Elastic IP --')\n    print(' 12. Allocate and associate Elastic IP')\n    print(' 13. Release Elastic IP')\n    print(' 14. Exit')\n\ndef show_instance_types():\n    print('--- Available instance types ---')\n    print('1. t2.micro')\n    print('2. t2.small')\n    print('3. t2.medium')\n    print('4. t2.large')\n\ndef show_ami_list():\n    print('--- Available AMI images ---')\n    print('1. Ubuntu Server 22.04 LTS')\n    print('2. Amazon Linux 2')\n    print('3. Windows Server 2022 Base')\n    print('4. Red Hat Enterprise Linux 9')\n\n    .\n    .\n    .\n    .\n\n    option = 0\n    while option != 14:\n        os.system('cls' if os.name == 'nt' else 'clear')\n        show_menu()\n        option = int(input('\\nSelect an option (1-14): '))\n\n        if option == 1:\n            sg_name = input('Security group name: ')\n            sg_description = input('Security group description: ')\n            aws.create_security_group(sg_name, sg_description, ingress_permissions)\n        elif option == 2:\n            sg_name = input('Security group name: ')\n            aws.delete_security_group(sg_name)\n        elif option == 3:\n            aws.list_security_groups()\n        elif option == 4:\n            os.system('cls' if os.name == 'nt' else 'clear')\n            show_ami_list()\n            ami_option = int(input('Selecciona una AMI (1-4): '))\n            if ami_option == 1:\n                ami = 'ami-0557a15b87f6559cf' # Ubuntu Server 22.04 LTS\n            elif ami_option == 2:\n                ami = 'ami-0dfcb1ef8550277af' # Amazon Linux 2\n            elif ami_option == 3:\n                ami = 'ami-0c2b0d3fb02824d92' # Windows Server 2022 Base\n            elif ami_option == 4:\n                ami = 'ami-0c9978668f8d55984' # Red Hat Enterprise Linux 9\n            else:\n                print('Opci\u00f3n no v\u00e1lida')\n                time.sleep(5)\n\n            show_instance_types()\n            ami_type = int(input('Selecciona una AMI (1-4): '))\n            if ami_type == 1:\n                instance_type = 't2.micro'\n            elif ami_type == 2:\n                instance_type = 't2.small'\n            elif ami_type == 3:\n                instance_type = 't2.medium'\n            elif ami_type == 4:\n                instance_type = 't2.large'\n            else:\n                print('Opci\u00f3n no v\u00e1lida')\n                time.sleep(5)\n\n            # Read the input parameters\n            instance_name = input('Instance name: ')\n            min_count = int(input('Min count: '))\n            sg_name = input('Security group: ')\n\n            # Check if security group exists\n            if not aws.security_group_exists(sg_name):\n                print('The security group does not exist')\n                time.sleep(5)\n                continue\n\n            # Create the instance\n            aws.create_instance(ami, min_count, instance_type, key_name, instance_name, sg_name)\n            time.sleep(5)\n</code></pre>"},{"location":"practicas13/practica13_4/","title":"IAW - Pr\u00e1ctica 13.4 Ansible","text":"<p> En esta pr\u00e1ctica se realiz\u00f3 la creaci\u00f3n de la infraestructura necesaria para desplegar las aplicaciones web propuetas en la pr\u00e1ctica 7 y 9 utilizando las funcionalidades de Ansible, de manera que, a trav\u00e9s de AWS, se realice el aprovisionamiento de sus infraestructuras usando las plantillas Ansible.</p>"},{"location":"practicas13/practica13_4/#estructura","title":"Estructura","text":"<pre><code>.\n\u251c\u2500\u2500 practica7\n\u2502   \u251c\u2500\u2500 playbook\n\u2502   \u2502   \u251c\u2500\u2500 eliminar_practica7.yaml\n\u2502   \u2502   \u2514\u2500\u2500 montar_practica7.yaml\n\u2502   \u2514\u2500\u2500 variables\n\u2502       \u2514\u2500\u2500 vars.yaml\n\u251c\u2500\u2500 practica9\n\u2502   \u251c\u2500\u2500 playbook\n\u2502   \u2502   \u251c\u2500\u2500 eliminar_practica9.yaml\n\u2502   \u2502   \u2514\u2500\u2500 montar_practica9.yaml\n\u2502   \u2514\u2500\u2500 variables\n\u2502       \u2514\u2500\u2500 vars.yaml\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Ambos directorios, practica7 y practica9 contienen un playbook tanto para montar la infrastructura necesaria como para desmontarla autom\u00e1ticamente, adem\u00e1s de un archivo de variables en caso de que sea necesario cambiarlas.</p>"},{"location":"practicas13/practica13_4/#practica-7","title":"Pr\u00e1ctica 7","text":"<pre><code>---\n- name: Playbook Infrastructura Pr\u00e1ctica 7\n  hosts: localhost\n  connection: local\n  gather_facts: false\n\n  tasks:\n\n    - name: Llamamos las variables\n      ansible.builtin.include_vars:\n        ../variables/vars.yaml\n\n# Creaci\u00f3n del grupo de seguridad de las m\u00e1quinas FrontEnd\n    - name: Creaci\u00f3n de grupo de seguridad FrontEndSecurityGroup\n      amazon.aws.ec2_group:\n        name: \"{{ frontend_sg }}\"\n        description: \"{{ frontend_sg_desc }}\"\n        rules:\n          - proto: tcp\n            from_port: \"{{ ssh_port }}\"\n            to_port: \"{{ ssh_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ http_port }}\"\n            to_port: \"{{ http_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ https_port }}\"\n            to_port: \"{{ https_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n      register: frontend_sec_grp\n\n# Creaci\u00f3n del grupo de seguridad de las m\u00e1quinas BackEnd\n    - name: Creaci\u00f3n de grupo de seguridad BackEndSecurityGroup\n      amazon.aws.ec2_group:\n        name: \"{{ backend_sg }}\"\n        description: \"{{ backend_sg_desc }}\"\n        rules:\n          - proto: tcp\n            from_port: \"{{ ssh_port }}\"\n            to_port: \"{{ ssh_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ mysql_port }}\"\n            to_port: \"{{ mysql_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n      register: backend_sec_grp\n\n# Creaci\u00f3n de la instancia FrontEnd\n    - name: Creaci\u00f3n de la m\u00e1quina FrontEnd\n      amazon.aws.ec2_instance:\n        name: \"{{ instancia_frontend }}\"\n        key_name: \"{{ key_name }}\"\n        security_group: \"{{ frontend_sg }}\"\n        instance_type: \"{{ instance_type }}\"\n        image_id: \"{{ ami }}\"\n        state: present\n      register: ec2_frontend\n\n\n# Creaci\u00f3n de la instancia BackEnd\n    - name: Creaci\u00f3n de la m\u00e1quina FrontEnd\n      amazon.aws.ec2_instance:\n        name: \"{{ instancia_backend }}\"\n        key_name: \"{{ key_name }}\"\n        security_group: \"{{ backend_sg }}\"\n        instance_type: \"{{ instance_type }}\"\n        image_id: \"{{ ami }}\"\n        state: present\n      register: ec2_backend\n\n    - name: Mostramos el contenido de las variables ec2\n      ansible.builtin.debug:\n        msg: \"FrontEnd: {{ ec2_frontend }} \\\n              BackEnd: {{ ec2_backend }}\"\n</code></pre>"},{"location":"practicas13/practica13_4/#practica-9","title":"Pr\u00e1ctica 9","text":"<pre><code>---\n- name: Playbook Infrastructura Pr\u00e1ctica 7\n  hosts: aws\n  become: true\n\n  tasks:\n\n    - name: Llamamos las variables\n      ansible.builtin.include_vars:\n        ../variables/vars.yaml\n\n# Creaci\u00f3n del grupo de seguridad del balanceador de carga\n    - name: Creaci\u00f3n de grupo de seguridad LoadBalancerSecurityGroup.\n      amazon.aws.ec2_group:\n        name: \"{{ balancer_sg }}\"\n        description: \"{{ balancer_sg_desc }}\"\n        rules:\n          - proto: tcp\n            from_port: \"{{ ssh_port }}\"\n            to_port: \"{{ ssh_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ http_port }}\"\n            to_port: \"{{ http_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ https_port }}\"\n            to_port: \"{{ https_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n      register: balancer_sec_grp\n\n# Creaci\u00f3n del grupo de seguridad del servidor NFS\n    - name: Creaci\u00f3n de grupo de seguridad NFSServerSecurityGroup.\n      amazon.aws.ec2_group:\n        name: \"{{ nfs_sg }}\"\n        description: \"{{ nfs_sg_desc }}\"\n        rules:\n          - proto: tcp\n            from_port: \"{{ ssh_port }}\"\n            to_port: \"{{ ssh_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ nfs_port }}\"\n            to_port: \"{{ nfs_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n      register: nfs_sec_grp\n\n# Creaci\u00f3n del grupo de seguridad de las m\u00e1quinas FrontEnd\n    - name: Creaci\u00f3n de grupo de seguridad FrontEndSecurityGroup.\n      amazon.aws.ec2_group:\n        name: \"{{ frontend_sg }}\"\n        description: \"{{ frontend_sg_desc }}\"\n        rules:\n          - proto: tcp\n            from_port: \"{{ ssh_port }}\"\n            to_port: \"{{ ssh_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ http_port }}\"\n            to_port: \"{{ http_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ https_port }}\"\n            to_port: \"{{ https_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n      register: frontend_sec_grp\n\n# Creaci\u00f3n del grupo de seguridad de las m\u00e1quinas BackEnd\n    - name: Creaci\u00f3n de grupo de seguridad BackEndSecurityGroup.\n      amazon.aws.ec2_group:\n        name: \"{{ backend_sg }}\"\n        description: \"{{ backend_sg_desc }}\"\n        rules:\n          - proto: tcp\n            from_port: \"{{ ssh_port }}\"\n            to_port: \"{{ ssh_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n          - proto: tcp\n            from_port: \"{{ mysql_port }}\"\n            to_port: \"{{ mysql_port }}\"\n            cidr_ip: \"{{ network_01 }}\"\n      register: backend_sec_grp\n\n\n# Creaci\u00f3n de la instancia LoadBalancer\n    - name: Creaci\u00f3n de la m\u00e1quina balanceador de carga.\n      amazon.aws.ec2_instance:\n        name: \"{{ instancia_balancer }}\"\n        key_name: \"{{ key_name }}\"\n        security_group: \"{{ balancer_sg }}\"\n        instance_type: \"{{ instance_type_med }}\"\n        image_id: \"{{ ami }}\"\n        state: running\n      register: ec2_balancer\n\n# Creaci\u00f3n de la instancia NFS Server\n    - name: Creaci\u00f3n de la m\u00e1quina servidor NFS.\n      amazon.aws.ec2_instance:\n        name: \"{{ instancia_nfs }}\"\n        key_name: \"{{ key_name }}\"\n        security_group: \"{{ nfs_sg }}\"\n        instance_type: \"{{ instance_type_med }}\"\n        image_id: \"{{ ami }}\"\n        state: running\n      register: ec2_nfs\n\n# Creaci\u00f3n de la instancia FrontEnd01\n    - name: Creaci\u00f3n de la m\u00e1quina FrontEnd01.\n      amazon.aws.ec2_instance:\n        name: \"{{ instancia_frontend_01 }}\"\n        key_name: \"{{ key_name }}\"\n        security_group: \"{{ frontend_sg }}\"\n        instance_type: \"{{ instance_type_sma }}\"\n        image_id: \"{{ ami }}\"\n        state: running\n      register: ec2_frontend01\n\n# Creaci\u00f3n de la instancia FrontEnd02\n    - name: Creaci\u00f3n de la m\u00e1quina FrontEnd02.\n      amazon.aws.ec2_instance:\n        name: \"{{ instancia_frontend_02 }}\"\n        key_name: \"{{ key_name }}\"\n        security_group: \"{{ frontend_sg }}\"\n        instance_type: \"{{ instance_type_sma }}\"\n        image_id: \"{{ ami }}\"\n        state: running\n      register: ec2_frontend02\n\n# Creaci\u00f3n de la instancia BackEnd\n    - name: Creaci\u00f3n de la m\u00e1quina FrontEnd.\n      amazon.aws.ec2_instance:\n        name: \"{{ instancia_backend }}\"\n        key_name: \"{{ key_name }}\"\n        security_group: \"{{ backend_sg }}\"\n        instance_type: \"{{ instance_type_sma }}\"\n        image_id: \"{{ ami }}\"\n        state: running\n      register: ec2_backend\n\n    - name: Mostramos el contenido de las variables ec2.\n      ansible.builtin.debug:\n        msg: \"FrontEnd01: {{ ec2_frontend01 }} \\\n              FrontEnd01: {{ ec2_frontend02 }}\n              BackEnd: {{ ec2_backend }} \\\n              Load Balancer: {{ ec2_balancer }} \\\n              NFS Server: {{ ec2_nfs }}\"\n</code></pre>"},{"location":"practicas13/practica13_5/","title":"IAW - Pr\u00e1ctica 13.5 Terraform","text":""},{"location":"practicas13/practica13_5/#que-es-terraform","title":"\u00bfQu\u00e9 es Terraform?","text":"<p>Terraform es una herramienta de infraestructura como c\u00f3digo (Infraestructure as Code, IaC) que permite crear, modificar y eliminar infraestructura de forma autom\u00e1tica.</p> <p>Terraform puede gestionar los recursos de diferentes proveedores de servicios en la nube, como AWS, Google Cloud, Azure, etc.</p>"},{"location":"practicas13/practica13_5/#comandos-basicos","title":"Comandos B\u00e1sicos","text":""},{"location":"practicas13/practica13_5/#inicializar-el-directorio-de-trabajo","title":"Inicializar el directorio de trabajo","text":"<p>En primer lugar hay que descargar los plugins necesarios del proveedor que se especifica en el archivo de configuraci\u00f3n.</p> <pre><code>terraform init\n</code></pre>"},{"location":"practicas13/practica13_5/#formatear-y-validar-el-archivo-de-configuracion","title":"Formatear y validar el archivo de configuraci\u00f3n","text":"<p>Terraform proporciona un comando para formatear el archivo de configuraci\u00f3n para que sea m\u00e1s legible. Algunas de las tareas que realiza este comando son, ajustar la indentaci\u00f3n, ordenar los argumentos de los bloques de configuraci\u00f3n, etc.</p> <pre><code>terraform fmt\n</code></pre> <p>Para validar la sintaxis del archivo de configuraci\u00f3n es posible utilizar el siguiente comando.</p> <pre><code>terraform validate\n</code></pre>"},{"location":"practicas13/practica13_5/#mostrar-los-cambios-que-se-van-a-realizar","title":"Mostrar los cambios que se van a realizar","text":"<p>Compara la configuraci\u00f3n del archivo de Terraform con la que existe actualmente en el proveedor de infraestructura y muestra las acciones que se tienen que realizar para conseguir la configuraci\u00f3n deseada. Permite al usuario verificar los cambios antes de aplicarlos en el proveedor.</p> <pre><code>terraform plan\n</code></pre>"},{"location":"practicas13/practica13_5/#aplicar-los-cambios","title":"Aplicar los cambios","text":"<p>Crea los recursos del archivo de configuraci\u00f3n en su cuenta de AWS.</p> <pre><code>terraform apply\n</code></pre> <p>Si se desea crear los recursos sin tener que escribir yes para confirmar la ejecuci\u00f3n del comando, podemos utilizar la opci\u00f3n -auto-approve.</p> <pre><code>terraform apply -auto-approve\n</code></pre>"},{"location":"practicas13/practica13_5/#mostrar-el-estado-actual-de-los-recursos","title":"Mostrar el estado actual de los recursos","text":"<p>Muestra los recursos creados en el proveedor y su estado actual.</p> <pre><code>terraform show\n</code></pre>"},{"location":"practicas13/practica13_5/#eliminar-los-recursos","title":"Eliminar los recursos","text":"<p>Elimina los recursos indicados en el proveedor.</p> <pre><code>terraform destroy\n</code></pre>"},{"location":"practicas13/practica13_5/#estructura","title":"Estructura","text":"<p>En esta pr\u00e1ctica se realiz\u00f3 la creaci\u00f3n de la infraestructura necesaria para desplegar las aplicaciones web propuetas en la pr\u00e1ctica 7 y 9 utilizando las funcionalidades de Terraform.</p> <pre><code>.\n\u251c\u2500\u2500 imgs\n\u2502   \u2514\u2500\u2500 terraform.png\n\u251c\u2500\u2500 practica7\n\u2502   \u251c\u2500\u2500 main.tf\n\u2502   \u251c\u2500\u2500 terraform.tfstate\n\u2502   \u2514\u2500\u2500 terraform.tfstate.backup\n\u251c\u2500\u2500 practica9\n\u2502   \u251c\u2500\u2500 main.tf\n\u2502   \u2514\u2500\u2500 terraform.tfstate\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Ambos directorios, practica7 y practica9 contienen un main.tf  para montar la infrastructura necesaria.</p>"},{"location":"practicas13/practica13_5/#practica-7","title":"Pr\u00e1ctica 7","text":"<pre><code># Configuramos el proveedor de AWS\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Creamos un grupo de seguridad para el frontend\nresource \"aws_security_group\" \"frontend_sg\" {\n  name        = \"FrontEndSecurityGroup\"\n  description = \"Grupo de seguridad para las maquinas FrontEnd\"\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Creamos un grupo de seguridad para el backend\nresource \"aws_security_group\" \"backend_sg\" {\n  name        = \"BackEndSecurityGroup\"\n  description = \"Grupo de seguridad para las maquinas BackEnd\"\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 3306\n    to_port     = 3306\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Creamos una instancia EC2 Frontend\nresource \"aws_instance\" \"instancia_frontend\" {\n  ami             = \"ami-00874d747dde814fa\"\n  instance_type   = \"t2.small\"\n  key_name        = \"vockey\"\n  security_groups = [aws_security_group.frontend_sg.name]\n\n  tags = {\n    Name = \"FrontEnd\"\n  }\n}\n\n# Creamos una instancia EC2 BackEnd\nresource \"aws_instance\" \"instancia_backend\" {\n  ami             = \"ami-00874d747dde814fa\"\n  instance_type   = \"t2.small\"\n  key_name        = \"vockey\"\n  security_groups = [aws_security_group.backend_sg.name]\n\n  tags = {\n    Name = \"BackEnd\"\n  }\n}\n\n# Creamos una IP el\u00e1stica y la asociamos a la instancia\nresource \"aws_eip\" \"ip_elastica\" {\n  instance = aws_instance.instancia_backend.id\n}\n\n# Mostramos la IP p\u00fablica de la instancia\noutput \"elastic_ip\" {\n  value = aws_eip.ip_elastica.public_ip\n}\n</code></pre>"},{"location":"practicas13/practica13_5/#practica-9","title":"Pr\u00e1ctica 9","text":"<pre><code># Configuramos el proveedor de AWS\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Creamos un grupo de seguridad para el frontend\nresource \"aws_security_group\" \"frontend_sg\" {\n  name        = \"FrontEndSecurityGroup\"\n  description = \"Grupo de seguridad para las maquinas FrontEnd\"\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Creamos un grupo de seguridad para el backend\nresource \"aws_security_group\" \"backend_sg\" {\n  name        = \"BackEndSecurityGroup\"\n  description = \"Grupo de seguridad para las maquinas BackEnd\"\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 3306\n    to_port     = 3306\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Creamos un grupo de seguridad para el load balancer\nresource \"aws_security_group\" \"balancer_sg\" {\n  name        = \"LoadBalancerSecurityGroup\"\n  description = \"Grupo de seguridad para el balanceador de carga\"\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Creamos un grupo de seguridad para el servidor NFS\nresource \"aws_security_group\" \"nfs_sg\" {\n  name        = \"NFSServerSecurityGroup\"\n  description = \"Grupo de seguridad para el servidor NFS\"\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 2049\n    to_port     = 2049\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Creamos una instancia EC2 balanceador de carga\nresource \"aws_instance\" \"instancia_balancer\" {\n  ami             = \"ami-00874d747dde814fa\"\n  instance_type   = \"t2.medium\"\n  key_name        = \"vockey\"\n  security_groups = [aws_security_group.balancer_sg.name]\n\n  tags = {\n    Name = \"LoadBalancer\"\n  }\n}\n\n# Creamos una instancia EC2 Frontend01\nresource \"aws_instance\" \"instancia_frontend01\" {\n  ami             = \"ami-00874d747dde814fa\"\n  instance_type   = \"t2.small\"\n  key_name        = \"vockey\"\n  security_groups = [aws_security_group.frontend_sg.name]\n\n  tags = {\n    Name = \"FrontEnd_01\"\n  }\n}\n\n# Creamos una instancia EC2 Frontend02\nresource \"aws_instance\" \"instancia_frontend02\" {\n  ami             = \"ami-00874d747dde814fa\"\n  instance_type   = \"t2.small\"\n  key_name        = \"vockey\"\n  security_groups = [aws_security_group.frontend_sg.name]\n\n  tags = {\n    Name = \"FrontEnd_02\"\n  }\n}\n\n\n# Creamos una instancia EC2 BackEnd\nresource \"aws_instance\" \"instancia_backend\" {\n  ami             = \"ami-00874d747dde814fa\"\n  instance_type   = \"t2.small\"\n  key_name        = \"vockey\"\n  security_groups = [aws_security_group.backend_sg.name]\n\n  tags = {\n    Name = \"BackEnd\"\n  }\n}\n\n# Creamos una instancia EC2 servidor NFS\nresource \"aws_instance\" \"instancia_nfs\" {\n  ami             = \"ami-00874d747dde814fa\"\n  instance_type   = \"t2.medium\"\n  key_name        = \"vockey\"\n  security_groups = [aws_security_group.nfs_sg.name]\n\n  tags = {\n    Name = \"NFSServer\"\n  }\n}\n\n# Creamos una IP el\u00e1stica y la asociamos a la instancia\nresource \"aws_eip\" \"ip_elastica\" {\n  instance = aws_instance.instancia_balancer.id\n}\n\n# Mostramos la IP p\u00fablica de la instancia\noutput \"elastic_ip\" {\n  value = aws_eip.ip_elastica.public_ip\n}\n</code></pre>"}]}